from ...Functions import *
from ...modules import *

async def tryToSaveAttachment(interaction: discord.Interaction, attachment: discord.Attachment) -> bool:
    if attachment.filename.endswith('.csv'):
        folder_path = os.path.join(path_lists_files, str(interaction.guild_id))
        file_path   = os.path.join(folder_path, f'{interaction.id}.csv') 
        os.makedirs(folder_path, exist_ok=True)

        await attachment.save(file_path)
        
        if hasUnsupportedChars(file_path):
            response = await interaction.followup.send(
                '✖ The `.csv` file sent contains unsupported characters.\n\n'
                'This often occurs when the `.csv` is generated with Minecraft in a language other than English (US).')
            await response.delete(delay = 15)
            os.remove(file_path)
            return False
        elif not hasGoodHeader(file_path):
            reponse = await interaction.followup.send(
                '✖ The file sent does not have the typical header of a list generated by Litematica: `"Item","Total","Missing","Available"`.')
            await reponse.delete(delay = 12)
            os.remove(file_path)
            return False
        elif isEmpty(file_path):
            reponse = await interaction.followup.send(
                '✖ The file sent is empty.')
            await reponse.delete(delay = 3)
            os.remove(file_path)
            return False
        elif hasDuplicated(file_path):
            reponse = await interaction.followup.send(
                '✖ The file sent contains duplicated materials.')
            await reponse.delete(delay = 5)
            os.remove(file_path)
            return False

        prepareList(file_path)
        return True
    
    else:
        reponse = await interaction.followup.send(
            '✖ The file sent is not a `.csv` or a `.litematic` file.')
        await reponse.delete(delay = 5)
        return False
    
def hasUnsupportedChars(file_path: str) -> bool:
    try:
        with open(file_path, 'r', encoding = 'utf-8') as file:
                for line in file:
                    if '�' in line:
                        return True
                    
        return False
    except:
        return True

def hasGoodHeader(file_path: str) -> bool:
    df_material_list = pd.read_csv(file_path)
    expected_columns = ['Item','Total','Missing','Available']

    if not(all(column in df_material_list for column in expected_columns)):
        return False
    
    return True

def isEmpty(file_path: str) -> bool:
    df_material_list = pd.read_csv(file_path)

    if df_material_list.empty:
        return True
    
    return False

def hasDuplicated(file_path: str) -> bool:
    df_material_list = pd.read_csv(file_path)
    return df_material_list['Item'].duplicated().any()

def prepareList(file_path: str) -> None:
    df_material_list = pd.read_csv(file_path)

    def get_quantities(number):
        if int(number/1728) != 0: 
                return f'SB {number/1728:.2f}'
        elif int(number%1728/64) != 0: 
            if int(number%1728%64) == 0:
                return f'64 x {int(number%1728/64)}'
            else:
                return f'64 x {int(number%1728/64)} + {int(number%1728%64)}'
        else: return number

    df_material_list.drop('Missing', axis = 1)
    df_material_list = df_material_list[['Available','Item','Total']]
    df_material_list['Last Edit By'] = ['No one' for x in range(df_material_list.shape[0])]
    df_material_list['Available'] = '❌'
    df_material_list['Total'] = df_material_list['Total'].apply(get_quantities)
    df_material_list.to_csv(file_path, index = False)